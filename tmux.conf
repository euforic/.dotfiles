
set-option -g default-command "reattach-to-user-namespace -l zsh"

# Set prefix key to c-f instead of defaul  c-b
unbind C-b
set -g prefix C-f
bind C-f send-prefix

# toogle last window by hitting again C-f
bind-key C-f last-window

# Start windows and pane numbering with index 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1 # re-number windows when one is closed set -g renumber-windows on highlight window when it has new activity
setw -g monitor-activity on
set -g visual-activity on

# Show times longer than supposed
set -g display-panes-time 2000

# {n}vim compability
set -g default-terminal "xterm-256color"

# Split horiziontal and vertical splits, instead of % and "
bind-key v split-window -h -c '#{pane_current_path}'
bind-key s split-window -v -c '#{pane_current_path}'

# switch panes
#bind -n C-h select-pane -L
#bind -n C-j select-pane -D
#bind -n C-k select-pane -U
#bind -n C-l select-pane -R
#bind -n C-\ select-pane -l

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n 'C-\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Source file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Select and copy with v and y, instead of default space and enter
bind-key -Tcopy-mode-vi 'v' send -X begin-selection
bind-key -Tcopy-mode-vi 'y' send -X copy-selection

# Faster command sequence
set -s escape-time 0

# Have a very large history
set -g history-limit 1000000

# Mouse mode on
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set -g mouse on

# Set title
set -g set-titles on
set -g set-titles-string "#T"

# Equally resize all panes
bind-key = select-layout even-horizontal
bind-key | select-layout even-vertical

# Resize panes
bind -r ^L resize-pane -R 5
bind -r ^J resize-pane -D 5
bind -r ^K resize-pane -U 5
bind -r ^H resize-pane -L 5
# Disable confirm before killing
bind-key x kill-pane

# This tmux statusbar config was created by tmuxline.vim
# on Wed, 25 Nov 2015

set -g status-bg "colour236"
set -g message-command-style fg="colour231"
set -g status-justify "left"
set -g status-left-length "100"
set -g status "on"
set -g pane-active-border-style fg="colour148"
set -g message-style bg="colour240"
set -g status-right-length "100"
set -g status-right-style none
set -g message-style fg="colour231"
set -g message-command-style bg="colour240"
set -g status-style none
set -g pane-border-style fg="colour240"
set -g status-left-style none
setw -g window-status-style fg="colour245"
setw -g window-status-style none
setw -g window-status-activity-style bg="colour236",fg="colour148",none
setw -g window-status-separator ""
setw -g window-status-style bg="colour236"
set -g status-left "#{prefix_highlight}#[fg=colour22,bg=colour148,bold] #S #[fg=colour148,bg=colour236,nobold,nounderscore,noitalics]"
set -g status-right "#[fg=colour240,bg=colour236,nobold,nounderscore,noitalics]#[fg=colour250,bg=colour240] %Y-%m-%d %H:%M #[fg=colour252,bg=colour240,nobold,nounderscore,noitalics]#[fg=colour241,bg=colour252] #h "
setw -g window-status-format "#[fg=colour245,bg=colour236] #I #[fg=colour245,bg=colour236]#W "
setw -g window-status-current-format "#[fg=colour236,bg=colour240,nobold,nounderscore,noitalics]#[fg=colour231,bg=colour240] #I #[fg=colour231,bg=colour240]#W #[fg=colour240,bg=colour236,nobold,nounderscore,noitalics]"

setw -g mode-keys vi
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

######## iTerm + Tmux key integration #########

# The followings are not any kind of setting for Tmux, but crucial to my
# own productivity. Setting them up is really pain, and I probably going to
# forget it. So I'm just putting them here again.

# First of all, iTerm can send hex codes for shortcuts you define. So for
# example you can send a hex code for the shortcut "c-f v" which in my case
# opens a vertical pane (see setting above). The hex code for this combination
# is: 0x06 0x76. There are many cases to find it out. One of them is the tool
# 'xxd'

# If you run "xxd -psd" and hit "c-f v" and then enter and finally c-c to exit
# , it outputs the following:
#
# 	$ xxd -psd
# 	^Fv
# 	06760a^C
#
# What matters is the sequence  06760a^C where:
#
# 	06 -> c-f
# 	76 -> v
# 	0a -> return
#	^C -> c-c
#
# From here, we know that 0x06 0x76 corresponds to "c-f v".
#
# Finally, inside the iTerm2 Key settings, I'm adding just various shortcuts,
# such as cmd-j, cmd-left, etc.. , select the option "send hex code" and the
# enter the hex code which I want to be executed, hence the tmux sequence. So
# when I press CMD + d in iterm, I send the sequence 0x06 0x76,
# which tmux inteprets it as opening a new pane. 
###############################################

# Local config
if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'
